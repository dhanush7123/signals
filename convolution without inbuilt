import numpy as np
import matplotlib.pyplot as plt
def linear_convolution_nf(x,y):
  x_len=len(x)
  y_len=len(y)
  result=[]
  for n in range(x_len+y_len-1):
    res_sum=0
    for k in range(x_len):
      if n-k<y_len and n-k>=0:
        res_sum+=x[k]*y[n-k]
    result.append(res_sum)
  return result

def circular_convolution_nf(x,y):
  if(len(x)!=len(y)):
    Max=max(len(x),len(y))
    x=np.pad(x,(0,Max-len(x)),mode='constant')
    y=np.pad(y,(0,Max-len(y)),mode='constant')
  N=len(x)
  result=[]
  for n in range(N):
    res_sum=0
    for k in range(N):
      res_sum+=x[k]*y[(n-k)%N]
    result.append(res_sum)
  return result
  
  
def circular_correlation_nf(x,y):
  N=len(x)
  res=[]
  for n in range(-(N-1),N):
    res_sum=0
    for k in range(N):
      if k-n>=0 and k-n<N:
        res_sum+=x[k] * y[(k-n)]
    res.append(res_sum)
  return res

x1=[1,2,3,4]
x2=[2,3,4,5]

print("Linear convolution of x1 and x2is:",linear_convolution_nf(x1,x2))
print("Circular convolution of x1 and x2is:",circular_convolution_nf(x1,x2))
print("Circular correlation of x1 and x2is:",circular_correlation_nf(x1,x2))
